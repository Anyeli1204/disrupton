package com.disrupton.cultural.controller;

import com.google.cloud.firestore.Firestore;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/firebase")
@RequiredArgsConstructor
@Slf4j
@CrossOrigin(origins = "*")
public class FirebaseCulturalController {
    
    private final Firestore firestore;
    
    /**
     * Endpoint de prueba para verificar la conectividad con Firebase
     */
    @GetMapping("/health")
    public ResponseEntity<String> health() {
        try {
            // Intentar una operaci√≥n simple para verificar la conexi√≥n
            firestore.collection("test").document("health").get();
            return ResponseEntity.ok("‚úÖ Firebase est√° funcionando correctamente");
        } catch (Exception e) {
            log.error("‚ùå Error al conectar con Firebase: {}", e.getMessage());
            return ResponseEntity.internalServerError().body("‚ùå Error de conexi√≥n con Firebase: " + e.getMessage());
        }
    }
    
    /**
     * Endpoint para obtener informaci√≥n del proyecto
     */
    @GetMapping("/info")
    public ResponseEntity<String> getProjectInfo() {
        try {
            String projectId = firestore.getOptions().getProjectId();
            
            String info = String.format("""
                üìÅ Proyecto ID: %s
                ‚úÖ Estado: Conectado
                """, projectId);
                
            return ResponseEntity.ok(info);
        } catch (Exception e) {
            log.error("‚ùå Error al obtener informaci√≥n del proyecto: {}", e.getMessage());
            return ResponseEntity.internalServerError().body("‚ùå Error: " + e.getMessage());
        }
    }
} 